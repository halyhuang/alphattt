<erl module=alphattt_mod>
-include("session.hrl").
-compile(export_all).

out(A) ->
    yaws_rpc:handler_session(A, {?MODULE, handle}).

handle(_State, {call, get_move, _Arg}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
	Response = web_agent:get_move(Pid), 
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};

handle(_State, {call, chat, {array, [RoomId, Msg]}}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    web_agent:chat(Pid, {RoomId, Msg}), 
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, true}};   

handle(_State, {call, get_user_name, _Arg}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    UserName = web_agent:get_user_name(Pid), 
    Response = json2:obj_from_list([{"username", UserName}]),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};   


handle(_State, {call, poll_get_move, _Arg}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),

    IsMove = web_agent:is_move(Pid),   
    {PlayerID, LegalMoves} = web_agent:get_legal_moves(Pid),
    LegalMovesArrayJson = [ json2:obj_from_list([{"R", R}, {"C", C}, {"r", R1}, {"c", 
              C1}])          || {R, C, R1, C1} <- LegalMoves ],

    Response = json2:obj_from_list([{"is_get_move", IsMove},
                                    {"player", PlayerID},
                                    {"legal_moves", {array, LegalMovesArrayJson}}]),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};


handle(_State, {call, poll_display, _Arg}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),

    Moves = web_agent:get_display_move(Pid),      
    MovesJson = [ begin
                    MoveJson = json2:obj_from_list([{"R", R}, {"C", C}, {"r", R1}, {"c", C1}]), 
                    json2:obj_from_list([{"player", Player},
                                         {"move", MoveJson}])
                  end || {Player, {R, C, R1, C1}} <- Moves],  
    Infos = web_agent:get_info(Pid),
    InfosJson = [json2:obj_from_list([{"player", Player},
                                      {"info", Info}])
                 || {Player, Info} <- Infos], 
    Msgs = web_agent:get_msg(Pid), 
    Response = json2:obj_from_list([{"moves", {array, MovesJson}},
				                    {"infos", {array, InfosJson}},
                                    {"msgs", {array, Msgs}}]),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};

handle(_State, {call, get_legal_moves, _Arg}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    Response = web_agent:get_legal_moves(Pid), 
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};

handle(_State, {call, set_move, {array, [R, C, R1, C1]}}, #session{pid_str = PidStr}) ->	
	Move = {R, C, R1, C1},
    Pid = web_agent_mgr:get_agent_pid(PidStr),   
	web_agent:set_move(Pid, Move),	
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, []}};

handle(_State, {call, get_room_state, _}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    {ok, {RoomState, Players, RemainTimes}} = web_agent:get_room_state(Pid),
    ResponseJson = 
        json2:obj_from_list([{"state", atom_to_list(RoomState)},
                             {"players", {array, Players}},
                             {"remain_times", {array, RemainTimes}}]),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, 
        {response, ResponseJson}};

handle(_State, {call, start_game, _}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    web_agent:enter_room(Pid),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, []}};

handle(_State, {call, get_all_robots, _}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
	Robots = web_agent:get_all_robots(Pid),
	ResponseJson = json2:obj_from_list([{"robot", {array, Robots}}]),	
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, ResponseJson}};

handle(_State, {call, start_robot, {array, [RobotName]}}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
	web_agent:start_robot(Pid, RobotName),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, []}};

handle(_State, {call, start_observe, _}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    web_agent:start_observe(Pid),    
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, []}};
	
handle(_State, {call, Func, _Args}, Session = #session{pid_str = PidStr}) ->
    io:format("alphattt unknown func call ~p, web_agent ~p~n", [Func, PidStr]),
    Response = json2:obj_from_list([{"value", true},
                                {"reason", ""}]),     
    {true, 0, Session, {response, Response}}.  
	
</erl>
