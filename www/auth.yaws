<erl module=auth_mod>
-include("session.hrl").
-compile(export_all).

out(A) ->
    yaws_rpc:handler_session(A, {?MODULE, handle}).

handle(_State, {call, _, _}, undefined) ->
    {ok, Pid} = web_agent_mgr:start_agent(),
    io:format("create web agent ~p~n", [Pid]),
    Response = json2:obj_from_list([{"value", false},
                                    {"reason", ""}]),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};

handle(_State, {call, is_login, _}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    IsLogin = web_agent:is_login(Pid),
    Response = json2:obj_from_list([{"value", IsLogin}]),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};
    
handle(_State, {call, is_guest, _}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    IsGeust = web_agent:is_guest(Pid),
    Response = json2:obj_from_list([{"value", IsGeust}]),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};    

handle(_State, {call, register, {array, [UserName, Password, Type]}}, Session) ->
	io:format("call ~p ~p ~p ~p ~n", [UserName, Password, Type, Session]),
	Response = case game_auth:register(UserName, Password, list_to_atom(Type)) of
	                ok ->
                        json2:obj_from_list([{"value", true},
                                             {"reason", ""}]);
                    {error, Reason} ->
						SendReason = case is_atom(Reason) of
										true -> atom_to_list(Reason);
										false -> Reason
									 end,
                        json2:obj_from_list([{"value", false},
                                             {"reason", SendReason}])
                end,	
    {true, 0, Session, {response, Response}};	
	
		
handle(_State, {call, login, {array, [UserName, Password]}}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
	io:format("login~n"),
    web_agent:login(Pid, UserName, Password),
	IsLogin = web_agent:is_login(Pid),
	io:format("islogin~p~n", [IsLogin]),
	Response = json2:obj_from_list([{"value", IsLogin}]),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};

handle(_State, {call, logout, _}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
    io:format("logout, web_agent ~p~n", [Pid]),    
    web_agent:logout(Pid),
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, []}};    

handle(_State, {call, Func, _Args}, Session = #session{pid_str = PidStr}) ->
    io:format("auth unknown func call ~p, web_agent ~p~n", [Func, PidStr]),
    {true, 0, Session, {response, "ok"}}. 

</erl>

